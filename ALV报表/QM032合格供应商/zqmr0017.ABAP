*&---------------------------------------------------------------------*
*& Report ZQMR0017
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*****************************************************************
*  Modified Recorder :
*  Date      C#NO        Author      Content
*  --------  ----------  ----------  ---------------
*  20210706  S4DK904941	 05168       QM:ZQM032调整字段逻辑 20210706
*****************************************************************
REPORT ZQMR0017.
TYPE-POOLS:SLIS."调用系统存在的类型池
*在调用ALV之前，需要先定义Layout和Fieldcat，他们属于slis类型池
DATA:FIELDCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,
     LAYOUT   TYPE SLIS_LAYOUT_ALV,
     W_REPID  TYPE SY-REPID. "记录系统当前的程序名
TABLES:EORD,MARA,ADRC,LFA1,BUT0ID,BKPF,EKKO,MAKT,ZQMT011.
DATA:LBKPF LIKE STANDARD TABLE OF BKPF WITH HEADER LINE."标准表格式的内表lbkpf
TYPES:BEGIN OF TY_ALV,
        MATNR           TYPE EORD-MATNR, "物料编码
        WERKS           TYPE EORD-WERKS, "工厂
        MATKX           TYPE MAKT-MAKTX, "物料描述（短描述）
        MATKL           TYPE MARA-MATKL, "物料类别
        LIFNR           TYPE EORD-LIFNR, "经销商编号
        LIFNR_NAME(100),"经销商名称
        STRAS           TYPE LFA1-STRAS, "经销商地址
        REGIOGROUP      TYPE ADRC-REGIOGROUP, "经销商等级
        DATE1           TYPE BUT0ID-VALID_DATE_FROM, "经销商评估合格日期
        DATE2           TYPE BUT0ID-VALID_DATE_TO, "经销商计划评估日期
        EMATN           TYPE EORD-EMATN, "MPN料号
        MFRNR           TYPE MARA-MFRNR, "生产商编号

        PRO_NAME(100),"生厂商名称
        STRAS2          TYPE LFA1-STRAS, "生产厂家地址
        PRO_REGIOGROUP  TYPE ADRC-REGIOGROUP, "生厂商等级
        DATE3           TYPE BUT0ID-VALID_DATE_FROM, "生厂商评估合格日期
        DATE4           TYPE BUT0ID-VALID_DATE_TO, "生产商计划评估日期
        ZALLERGEN(80),"过敏原
        ZTRSGEN(80),"转基因
        ZEXPMAT(80),"贵重物料
        ZWHP(80),"危险化学品
        ZORIADD(80),"原产地
        ZQMSAMP(80),"开箱量计算标识
        CCTJ            TYPE ZQMT011-CCTJ, "存储条件
        ZMATDET(80),"材质明细
        ZSAMPING(80),"QA取样量
        TIME(10)        TYPE C, "最近下单时间
        MPROF           TYPE MARA-MPROF, "制造商部件的参数文件
      END OF TY_ALV.
TYPES:BEGIN OF TY_ALL.
        INCLUDE TYPE TY_ALV.
      TYPES:END OF TY_ALL.
DATA:GT_ALV TYPE TABLE OF TY_ALV,
     GS_ALV LIKE LINE OF GT_ALV.
DATA GV_SEL_ERROR TYPE FLAG.



SELECTION-SCREEN BEGIN OF BLOCK BLK WITH FRAME TITLE TEXT-001."定义屏幕
PARAMETERS P_WERKS TYPE VBAP-WERKS OBLIGATORY.
SELECT-OPTIONS:"s_werks FOR eord-werks,"条件输入框，一个for对应一个\工厂
S_MATNR FOR EORD-MATNR,"for前面的是字段显示的名称，可以修改，但是注意不要超过8个字符，否则会报错、物料编码
S_LIFNR FOR EORD-LIFNR,"经销商编码
S_MFRNR FOR MARA-MFRNR,"制造商编码
S_GROUP1 FOR ADRC-REGIOGROUP,"经销商等级
S_GROUP2 FOR ADRC-REGIOGROUP,"制造商等级
S_DATE1 FOR BUT0ID-VALID_DATE_FROM,"经销商评估合格日期
S_DATE2 FOR BUT0ID-VALID_DATE_TO,"经销商计划评估日期
S_DATE3 FOR BUT0ID-VALID_DATE_FROM,"生产商计划评估日期
S_DATE4 FOR BUT0ID-VALID_DATE_TO,"生厂商计划评估日期
S_TIME FOR EKKO-AEDAT,"最近下单日期
S_MATKL FOR MARA-MATKL."物料组
SELECTION-SCREEN END OF BLOCK BLK.

START-OF-SELECTION.
  PERFORM FRM_AUTHORITY_CHECK.
  CHECK GV_SEL_ERROR IS INITIAL."权限检查标识
*调用子程序
  PERFORM GETDATA.
  PERFORM CATALOG.
  PERFORM ALVSHOW.
*定义子程序
FORM GETDATA."查询语句
  DATA:LV_ZALLERGEN(10) TYPE C,
       LV_ZTRSGEN(10)   TYPE C,
       LV_ZEXPMAT(10)   TYPE C,
       LV_ZWHP(10)      TYPE C,
       LV_ZORIADD(10)   TYPE C,
       LV_ZQMSAMP(10)   TYPE C,
       LV_ZMATDET(10)   TYPE C,
       LV_ZSAMPING(10)  TYPE C.
  LV_ZALLERGEN = 'ZALLERGEN'.
  LV_ZTRSGEN = 'ZTRSGEN'.
  LV_ZEXPMAT = 'ZEXPMAT'.
  LV_ZWHP = 'ZWHP'.
  LV_ZORIADD = 'ZORIADD'.
  LV_ZQMSAMP = 'ZQMSAMP'.
  LV_ZMATDET = 'ZMATDET'.
  LV_ZSAMPING = 'ZSAMPING'.
  "使用宏来改变特征名转换前后的值
  DEFINE CHANGEAUSP.
    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
    EXPORTING
      input  = &1
    IMPORTING
      output = &2.
  END-OF-DEFINITION.
  CHANGEAUSP LV_ZALLERGEN LV_ZALLERGEN.
  CHANGEAUSP LV_ZTRSGEN LV_ZTRSGEN.
  CHANGEAUSP LV_ZEXPMAT LV_ZEXPMAT.
  CHANGEAUSP LV_ZWHP LV_ZWHP.
  CHANGEAUSP LV_ZORIADD LV_ZORIADD.
  CHANGEAUSP LV_ZQMSAMP LV_ZQMSAMP.
  CHANGEAUSP LV_ZMATDET LV_ZMATDET.
  CHANGEAUSP LV_ZSAMPING LV_ZSAMPING.
  "先查询的是经销商的数据
  SELECT
  WERKS,
  EORD~MATNR,
  LIFNR,
  EMATN,
  PARTNER,
  MARA~MFRNR,
  MATKL,
  VALID_DATE_FROM AS DATE1,
  VALID_DATE_TO AS DATE2,
  BUT0ID~TYPE AS FLAG,
  MARA~MPROF AS MPROF
  INTO TABLE @DATA(GT_ALL)
  FROM EORD
  LEFT JOIN BUT0ID
  ON BUT0ID~PARTNER = EORD~LIFNR
  LEFT JOIN MARA
  ON MARA~MATNR = EORD~MATNR
  WHERE EORD~MATNR IN @S_MATNR
  AND EORD~WERKS = @P_WERKS
  AND EORD~LIFNR IN @S_LIFNR
  AND EORD~NOTKZ <> 'X'
  AND BUT0ID~VALID_DATE_FROM IN @S_DATE1
  AND BUT0ID~VALID_DATE_TO IN @S_DATE2
  AND MARA~MATKL IN @S_MATKL
  AND MARA~LVORM <> 'X'
  AND EORD~LIFNR NOT IN ('8100','8200','0000008100','0000008200').
  SORT GT_ALL BY WERKS MATNR LIFNR EMATN ASCENDING FLAG DESCENDING.
  DELETE ADJACENT DUPLICATES FROM GT_ALL COMPARING WERKS MATNR LIFNR EMATN.

  "然后查询的是生产商的数据
  SELECT
  MATKL,
  EMATN,
  PARTNER,
  MFRNR,
  VALID_DATE_FROM AS DATE3,
  VALID_DATE_TO AS DATE4
  FROM MARA
  INNER JOIN EORD
  ON EORD~MATNR = MARA~MATNR " S4DK904941
  INNER JOIN BUT0ID
  ON EORD~LIFNR = BUT0ID~PARTNER
  FOR ALL ENTRIES IN @GT_ALL
  WHERE MARA~MATNR = @GT_ALL-MATNR
    AND BUT0ID~TYPE = 'ZQM999'
  INTO TABLE @DATA(GT_ALL2).
  "不启用MPN
  SELECT
  ZQMT054~ZMFRNR AS MFRNR,
  VALID_DATE_FROM AS DATE3,
  VALID_DATE_TO AS DATE4
  FROM ZQMT054
  INNER JOIN BUT0ID
  ON ZQMT054~ZMFRNR = BUT0ID~PARTNER
  FOR ALL ENTRIES IN @GT_ALL
  WHERE ZQMT054~MATNR = @GT_ALL-EMATN
  AND BUT0ID~TYPE = 'ZQM999'
  INTO TABLE @DATA(GT_ALL3).



  IF GT_ALL IS NOT INITIAL.
*国家文本描述 jiguican 20201229
    SELECT BUT020~PARTNER,T005T~LANDX INTO TABLE @DATA(LT_BUT020)
        FROM BUT020
      LEFT JOIN ADRC ON BUT020~ADDRNUMBER = ADRC~ADDRNUMBER
      LEFT JOIN T005T ON ADRC~COUNTRY = T005T~LAND1
      WHERE T005T~SPRAS = '1'.

    "MAKT表
    SELECT
    MATNR,
    MAKTX
    INTO TABLE @DATA(LT_MAKT)
          FROM MAKT
          FOR ALL ENTRIES IN @GT_ALL
          WHERE MAKT~SPRAS = '1'
          AND MAKT~MATNR = @GT_ALL-MATNR.

    "LFA1表
    SELECT
    NAME1,
    NAME2,
    NAME3,
    NAME4,
    LIFNR,
    STRAS
    INTO TABLE @DATA(LT_LFA1)
          FROM LFA1
          FOR ALL ENTRIES IN @GT_ALL
          WHERE LFA1~LIFNR = @GT_ALL-LIFNR.

    "ADRC表
    SELECT
    LIFNR,
    ADRC~NAME1,
    ADRC~NAME2,
    ADRC~NAME3,
    ADRC~NAME4,
    ADRC~REGIOGROUP
    FROM ADRC
    INNER JOIN LFA1
    ON LFA1~NAME1 = ADRC~NAME1
    AND LFA1~NAME2 = ADRC~NAME2
    AND LFA1~NAME3 = ADRC~NAME3
    AND LFA1~NAME4 = ADRC~NAME4
    AND ADRC~REGIOGROUP <> ''
    FOR ALL ENTRIES IN @GT_ALL
    WHERE LFA1~LIFNR = @GT_ALL-LIFNR
    INTO TABLE @DATA(LT_ADRC).

    "MARA表
    SELECT
    A~MFRNR,
    B~LIFNR,
    B~STRAS,
    B~NAME1,
    B~NAME2,
    B~NAME3,
    B~NAME4,
    A~MATNR,
    A~MPROF
    FROM MARA AS A
    INNER JOIN LFA1 AS B
    ON B~LIFNR = A~MFRNR
    FOR ALL ENTRIES IN @GT_ALL
    WHERE A~MATNR = @GT_ALL-EMATN
    INTO TABLE @DATA(LT_MARA).

    "ADRC表2
    IF LT_MARA IS NOT INITIAL.
      SELECT
      A~MFRNR,
      B~LIFNR,
      B~STRAS,
      ADRC~NAME1,
      ADRC~NAME2,
      ADRC~NAME3,
      ADRC~NAME4,
      A~MATNR,
      ADRC~REGIOGROUP
      FROM MARA AS A
      INNER JOIN LFA1 AS B
      ON B~LIFNR = A~MFRNR
      INNER JOIN ADRC
      ON ADRC~NAME1 = B~NAME1
      AND ADRC~NAME2 = B~NAME2
      AND ADRC~NAME3 = B~NAME3
      AND ADRC~NAME4 = B~NAME4
      AND ADRC~REGIOGROUP <> ''
      FOR ALL ENTRIES IN @GT_ALL
      WHERE A~MATNR = @GT_ALL-EMATN
      INTO TABLE @DATA(LT_ADRC2).
    ENDIF.

    "非MPN物料供应商与生产制造商映射表   当物料无MPN时取该表中供应商号
    SELECT
    A~ZMFRNR AS MFRNR,
    A~LIFNR,
    B~STRAS,
    B~NAME1,
    B~NAME2,
    B~NAME3,
    B~NAME4,
    A~MATNR
    INTO TABLE @DATA(LT_ZQMT054)
          FROM ZQMT054 AS A
          INNER JOIN LFA1 AS B
          ON B~LIFNR = A~ZMFRNR
          FOR ALL ENTRIES IN @GT_ALL
          WHERE A~MATNR = @GT_ALL-MATNR.
    "ADRC表3
    IF LT_ZQMT054 IS NOT INITIAL.
      SELECT
      A~ZMFRNR AS MFRNR,
      A~LIFNR,
      B~STRAS,
      ADRC~NAME1,
      ADRC~NAME2,
      ADRC~NAME3,
      ADRC~NAME4,
      A~MATNR,
      ADRC~REGIOGROUP
      FROM ZQMT054 AS A
      INNER JOIN LFA1 AS B
      ON B~LIFNR = A~ZMFRNR
      INNER JOIN ADRC
      ON ADRC~NAME1 = B~NAME1
      AND ADRC~NAME2 = B~NAME2
      AND ADRC~NAME3 = B~NAME3
      AND ADRC~NAME4 = B~NAME4
      AND ADRC~REGIOGROUP <> ''
      FOR ALL ENTRIES IN @GT_ALL
      WHERE A~MATNR = @GT_ALL-MATNR
      INTO TABLE @DATA(LT_ADRC3).
    ENDIF.

    "ZQMT011表
    SELECT
    MATNR,
    RAUBE,
    SC,
    CCTJ
    FROM ZQMT011
    INNER JOIN MARA
    ON MARA~RAUBE = ZQMT011~SC
    FOR ALL ENTRIES IN @GT_ALL
    WHERE ZQMT011~SC = MARA~RAUBE
    AND MARA~MATNR = @GT_ALL-MATNR
    INTO TABLE @DATA(LT_ZQMT011).

    "AUSP表 S4DK904941 取特性文本
    SELECT
    AUSP~OBJEK,
    AUSP~ATINN,
    AUSP~ATWRT,
    ATWTB
    INTO TABLE @DATA(LT_AUSP)
          FROM AUSP
      LEFT JOIN CAWN ON AUSP~ATINN = CAWN~ATINN AND AUSP~ATWRT = CAWN~ATWRT
      LEFT JOIN CAWNT ON AUSP~ATINN = CAWNT~ATINN AND CAWN~ATZHL = CAWNT~ATZHL  AND CAWNT~SPRAS = 1
          WHERE  AUSP~ATINN IN (@LV_ZALLERGEN,@LV_ZTRSGEN,@LV_ZEXPMAT,
          @LV_ZWHP,@LV_ZORIADD,@LV_ZQMSAMP,@LV_ZMATDET,@LV_ZSAMPING).

    "最近下单时间相关的查询
**    "首先第一个是有MPN物料的
**    SELECT
**    MATNR,
**    EMATN,
**    EKKO~EBELN,
**    LIFNR,
**    EKKO~AEDAT
**    FROM EKKO
**    INNER JOIN EKPO
**    ON EKPO~EBELN = EKKO~EBELN
**    FOR ALL ENTRIES IN @GT_ALL
**    WHERE EKPO~EMATN = @GT_ALL-EMATN
**    AND EKPO~MATNR = @GT_ALL-MATNR
**    AND EKKO~LIFNR = @GT_ALL-LIFNR
**    AND EKKO~AEDAT <= @SY-DATUM
**    AND EKKO~AEDAT > @( SY-DATUM - 731 )
**    AND EKPO~LOEKZ <> 'X'
**    INTO TABLE @DATA(LT_TIME).
**    SORT LT_TIME BY AEDAT DESCENDING.
**    "第二个是没有MPN物料的
**    SELECT
**    MATNR,
**    EKKO~EBELN,
**    LIFNR,
**    EKKO~AEDAT
**    FROM EKKO
**    INNER JOIN EKPO
**    ON EKPO~EBELN = EKKO~EBELN
**    FOR ALL ENTRIES IN @GT_ALL
**    WHERE EKPO~MATNR = @GT_ALL-MATNR
**    AND EKKO~LIFNR = @GT_ALL-LIFNR
**    AND EKKO~AEDAT <= @SY-DATUM
**    AND EKKO~AEDAT > @( SY-DATUM - 731 )
**    AND EKPO~LOEKZ <> 'X'
**    INTO TABLE @DATA(LT_TIME2).
**    SORT LT_TIME2 BY AEDAT DESCENDING.

**    "如果选择屏幕最近下单时间不为空的话，下面对数据进行整理
**    IF S_TIME IS NOT INITIAL.
**      SELECT
**      *
**      FROM @LT_TIME AS A
**      WHERE A~AEDAT IN @S_TIME
**      INTO TABLE @LT_TIME.
**
**      SELECT
**      *
**      FROM @LT_TIME2 AS A
**      WHERE A~AEDAT IN @S_TIME
**      INTO TABLE @LT_TIME2.
**    ENDIF.

    SELECT
      MATNR,
      MATKL
    INTO TABLE @DATA(LT_MATKL)
    FROM MARA
    FOR ALL ENTRIES IN @GT_ALL
    WHERE MARA~MATNR = @GT_ALL-MATNR.
  ENDIF.
  LOOP AT GT_ALL INTO DATA(GS_ALL).
    MOVE-CORRESPONDING GS_ALL TO GS_ALV.
    "判断主数据是否删除
    SELECT SINGLE
      MARA~MATNR
    INTO @DATA(LV_TARGET)
    FROM MARA
    INNER JOIN MARC
    ON MARA~MATNR = MARC~MATNR
    AND MARC~WERKS = @GS_ALL-WERKS
    WHERE MARA~MATNR = @GS_ALL-MATNR
      AND MARA~LVORM <> 'X'
      AND MARC~LVORM <> 'X'.
    IF LV_TARGET IS INITIAL.
      CLEAR GS_ALV.
      CONTINUE.
    ENDIF.
    CLEAR LV_TARGET.
    IF GS_ALL-EMATN IS NOT INITIAL.
      SELECT SINGLE
      MARA~MATNR
      INTO @LV_TARGET
      FROM MARA
      WHERE MARA~MATNR = @GS_ALL-EMATN
      AND MARA~LVORM <> 'X'.
      IF LV_TARGET IS INITIAL.
        CLEAR GS_ALV.
        CONTINUE.
      ENDIF.
    ENDIF.
    CLEAR LV_TARGET.
    "物料描述（短描述）
    READ TABLE LT_MAKT INTO DATA(LS_MAKT) WITH KEY MATNR = GS_ALL-MATNR.
    IF SY-SUBRC = 0.
      GS_ALV-MATKX = LS_MAKT-MAKTX.
      CLEAR LS_MAKT.
    ENDIF.
*    READ TABLE lt_matkl INTO DATA(ls_matkl) WITH KEY matnr = gs_all-matnr.
*    IF sy-subrc = 0.
*      gs_alv-matkl = ls_matkl-matkl.
*    ENDIF.
    "物料类别
    IF GS_ALV-MATKL+0(2) = '10' OR GS_ALV-MATKL+0(4) = '2002' OR GS_ALV-MATKL+0(4) = '2006'.
      GS_ALV-MATKL = 'I类'.
    ELSEIF GS_ALV-MATKL+0(4) = '2004' OR GS_ALV-MATKL+0(4) = '2008'.
      GS_ALV-MATKL = 'III类'.
    ENDIF.
    "经销商名称、经销商地址
    READ TABLE LT_LFA1 INTO DATA(LS_LFA1) WITH KEY LIFNR = GS_ALL-LIFNR.
    IF SY-SUBRC = 0.
      GS_ALV-LIFNR_NAME = LS_LFA1-NAME1 && LS_LFA1-NAME2 && LS_LFA1-NAME3 && LS_LFA1-NAME4.
      GS_ALV-STRAS = LS_LFA1-STRAS.
      CLEAR LS_LFA1.
    ENDIF.
    "经销商等级
    READ TABLE LT_ADRC INTO DATA(LS_ADRC) WITH KEY LIFNR = GS_ALL-LIFNR.
    IF SY-SUBRC = 0.
      GS_ALV-REGIOGROUP = LS_ADRC-REGIOGROUP.
      CLEAR LS_ADRC.
    ENDIF.
    "判断经销商等级是否在选择屏幕的条件范围内
    DATA LS_GROUP1 LIKE LINE OF S_GROUP1.
    IF S_GROUP1 IS NOT INITIAL.
      READ TABLE S_GROUP1 INTO LS_GROUP1 WITH KEY LOW = GS_ALV-REGIOGROUP.
      IF SY-SUBRC <> 0.
        CLEAR LS_GROUP1.
        CONTINUE.
      ENDIF.
    ENDIF.


    "判断生产商是否在选择屏幕条件内
    DATA LS_GROUP2 LIKE LINE OF S_GROUP2.
    IF S_GROUP2 IS NOT INITIAL.
      READ TABLE S_GROUP2 INTO LS_GROUP2 WITH KEY LOW = GS_ALV-PRO_REGIOGROUP.
      IF SY-SUBRC <> 0.
        CLEAR LS_GROUP2.
        CONTINUE.
      ENDIF.
    ENDIF.
    "存储条件
    READ TABLE LT_ZQMT011 INTO DATA(LS_ZQMT011) WITH KEY MATNR = GS_ALL-MATNR.
    IF SY-SUBRC = 0.
      GS_ALV-CCTJ = LS_ZQMT011-CCTJ.
      CLEAR LS_ZQMT011.
    ENDIF.
    "各种特性值相关
    READ TABLE LT_AUSP INTO DATA(LS_AUSP) WITH KEY OBJEK = GS_ALL-MATNR
          ATINN = LV_ZALLERGEN.
    IF SY-SUBRC = 0.
      "过敏原
      GS_ALV-ZALLERGEN = LS_AUSP-ATWRT.
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZALLERGEN = '/'.                               "S4DK904941
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZTRSGEN.
    IF SY-SUBRC = 0.
      "转基因
      GS_ALV-ZTRSGEN = LS_AUSP-ATWTB.                       "S4DK904941
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZTRSGEN = '/'.                                 "S4DK904941
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZEXPMAT.
    IF SY-SUBRC = 0.
      "贵重物料
      GS_ALV-ZEXPMAT = LS_AUSP-ATWRT.
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZEXPMAT = '/'.
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZWHP.
    IF SY-SUBRC = 0.
      "危险化学品
      GS_ALV-ZWHP = LS_AUSP-ATWTB.                          "S4DK904941
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZWHP = '/'.                                    "S4DK904941
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZORIADD.
    IF SY-SUBRC = 0.
      "原产地
      GS_ALV-ZORIADD = LS_AUSP-ATWRT.
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZORIADD = '/'.                                 "S4DK904941
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZQMSAMP.
    IF SY-SUBRC = 0.
      "开箱量计算标识
      GS_ALV-ZQMSAMP = LS_AUSP-ATWRT.
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZQMSAMP = '/'.
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZMATDET.
    IF SY-SUBRC = 0.
      "材质明细
      GS_ALV-ZMATDET = LS_AUSP-ATWRT.
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZMATDET = '/'.                                 "S4DK904941
    ENDIF.
    READ TABLE LT_AUSP INTO LS_AUSP WITH KEY OBJEK = GS_ALL-MATNR
    ATINN = LV_ZSAMPING.
    IF SY-SUBRC = 0.
      "QA取样量
      GS_ALV-ZSAMPING = LS_AUSP-ATWRT.
      CLEAR LS_AUSP.
    ELSE.
      GS_ALV-ZSAMPING = '/'.                                "S4DK904941
    ENDIF.

    IF GS_ALV-LIFNR = '8100' OR GS_ALV-LIFNR = '8200'
    OR GS_ALV-LIFNR = '0000008100' OR GS_ALV-LIFNR = '0000008200'.
      CONTINUE.
    ENDIF.
    IF GS_ALL-FLAG <> 'ZQM999'.
      GS_ALV-DATE1 = ''.
      GS_ALV-DATE2 = ''.
*      gs_alv-date3 = ''.
*      gs_alv-date4 = ''.
      IF S_DATE1 IS NOT INITIAL OR S_DATE2 IS NOT INITIAL.
        CLEAR:GS_ALL,GS_ALV.
        CONTINUE.
      ENDIF.
      IF GS_ALV-EMATN = '无'.
        GS_ALV-DATE3 = GS_ALV-DATE1.
        GS_ALV-DATE4 = GS_ALV-DATE2.

      ENDIF.
    ENDIF.

    "经销商评估合格日期
    "经销商计划评估日期
    "MPN料号
    IF GS_ALL-MPROF IS INITIAL.
      CLEAR GS_ALL-EMATN.
    ENDIF.
    IF GS_ALL-EMATN IS INITIAL.
      GS_ALV-EMATN = '无'.
      "没有MPN物料的原产地取生产商或供应商 jiguican 20201229
      GS_ALV-ZORIADD = ''.
      "modify by wwj
      "不启用MPN的生产商编号及名称、地址、等级、日期和经销商的一致
      "gs_alv-mfrnr = gs_all-lifnr.
      "gs_alv-pro_name = gs_alv-lifnr_name.
      "gs_alv-stras2 = gs_alv-stras.
      "gs_alv-pro_regiogroup = gs_alv-regiogroup.
      "gs_alv-date3 = gs_alv-date1.
      "gs_alv-date4 = gs_alv-date2.

      READ TABLE LT_ZQMT054 INTO DATA(LS_ZQMT054) WITH KEY MATNR = GS_ALL-MATNR  LIFNR = GS_ALL-LIFNR .
      IF SY-SUBRC = 0.
        LOOP AT LT_ZQMT054 INTO LS_ZQMT054 WHERE  MATNR = GS_ALL-MATNR AND  LIFNR = GS_ALL-LIFNR.

          "生产商编号
          GS_ALV-MFRNR = LS_ZQMT054-MFRNR.
          "生产商名称
          GS_ALV-PRO_NAME = LS_ZQMT054-NAME1 && LS_ZQMT054-NAME2 && LS_ZQMT054-NAME3 && LS_ZQMT054-NAME4.
          "生产厂家地址
          GS_ALV-STRAS2 = LS_ZQMT054-STRAS.
          "生产商等级
          READ TABLE LT_ADRC3 INTO DATA(LS_ADRC3) WITH KEY MATNR = GS_ALL-MATNR MFRNR = GS_ALV-MFRNR.
          IF SY-SUBRC = 0.
            GS_ALV-PRO_REGIOGROUP = LS_ADRC3-REGIOGROUP.
            CLEAR LS_ADRC3.
          ENDIF.
*原产地  jiguican 20201229
          READ TABLE LT_BUT020 INTO DATA(LS_BUT020) WITH KEY PARTNER = GS_ALV-MFRNR.
          IF SY-SUBRC = 0.
            GS_ALV-ZORIADD = LS_BUT020-LANDX.
            CLEAR LS_BUT020.
          ELSE.
            GS_ALV-ZORIADD = '/'.
          ENDIF.

          CLEAR LS_ZQMT054.
          "生产商评估合格日期、生产商计划评估日期
          READ TABLE GT_ALL3 INTO DATA(GS_ALL3) WITH KEY "ematn = gs_all-ematn
                MFRNR = GS_ALV-MFRNR.
          IF SY-SUBRC = 0.
            GS_ALV-DATE3 = GS_ALL3-DATE3.
            GS_ALV-DATE4 = GS_ALL3-DATE4.

          ENDIF.
          CLEAR GS_ALL3.
          "modify by wwj


          "最近下单时间
          SELECT
          EKPO~EBELN,
          EKKO~AEDAT
          INTO TABLE @DATA(LT_EBELN2)
                FROM EKPO
                INNER JOIN EKKO
                ON EKPO~EBELN = EKKO~EBELN
                WHERE EKPO~MATNR = @GS_ALL-MATNR
                AND EKKO~LIFNR = @GS_ALL-LIFNR.
          SORT LT_EBELN2 BY AEDAT DESCENDING.
          READ TABLE LT_EBELN2 INTO DATA(LV_EBELN2) INDEX 1.
          READ TABLE LT_TIME2 INTO DATA(LS_TIME2) WITH KEY MATNR = GS_ALL-MATNR
                LIFNR = GS_ALL-LIFNR
                EBELN = LV_EBELN2-EBELN.
          IF SY-SUBRC = 0.
            GS_ALV-TIME = LS_TIME2-AEDAT+0(4) && '.' && LS_TIME2-AEDAT+4(2) && '.' && LS_TIME2-AEDAT+6(2).
          ELSE.
            IF S_TIME IS NOT INITIAL.
              CONTINUE.
            ENDIF.
            GS_ALV-TIME = '超过2年未下单'.
          ENDIF.
          CLEAR LV_EBELN2.
          CLEAR:LS_TIME2.
          APPEND GS_ALV TO GT_ALV.
        ENDLOOP.
      ELSE.
        IF GS_ALL-MATKL+0(4) = '1002'.

        ELSE.

          GS_ALV-MFRNR = GS_ALV-LIFNR.
          GS_ALV-PRO_NAME = GS_ALV-LIFNR_NAME.
          GS_ALV-STRAS2 = GS_ALV-STRAS.
          GS_ALV-PRO_REGIOGROUP = GS_ALV-REGIOGROUP.


*原产地  jiguican 20201229
          READ TABLE LT_BUT020 INTO LS_BUT020 WITH KEY PARTNER = GS_ALV-MFRNR.
          IF SY-SUBRC = 0.
            GS_ALV-ZORIADD = LS_BUT020-LANDX.
            CLEAR LS_BUT020.
          ELSE.
            GS_ALV-ZORIADD = '/'.
          ENDIF.

          "生产商评估合格日期、生产商计划评估日期
          READ TABLE GT_ALL2 INTO DATA(GS_ALL2) WITH KEY "ematn = gs_all-ematn
                PARTNER = GS_ALV-MFRNR.
          IF SY-SUBRC = 0.
            GS_ALV-DATE3 = GS_ALL2-DATE3.
            GS_ALV-DATE4 = GS_ALL2-DATE4.

          ENDIF.
          CLEAR GS_ALL2.

          "最近下单时间  正常物料
**          SELECT
**          EKKO~EBELN,
**          EKKO~AEDAT
**          INTO TABLE @DATA(LT_EBELN3)
**                FROM EKPO
**                INNER JOIN EKKO
**                ON EKKO~EBELN = EKPO~EBELN
**                WHERE EKPO~MATNR = @GS_ALL-MATNR.
**          SORT LT_EBELN3 BY AEDAT DESCENDING.
**          READ TABLE LT_EBELN3 INTO DATA(LV_EBELN) INDEX 1.
**          READ TABLE LT_TIME2 INTO DATA(LS_TIME) WITH KEY MATNR = GS_ALL-MATNR" S4DK905969
***                  EMATN = GS_ALL-EMATN
**                LIFNR = GS_ALL-LIFNR  " S4DK905969
**                EBELN = LV_EBELN-EBELN." S4DK905969
**          IF SY-SUBRC = 0.
**            GS_ALV-TIME = LS_TIME-AEDAT+0(4) && '.' && LS_TIME-AEDAT+4(2) && '.' && LS_TIME-AEDAT+6(2)." S4DK905969
**          ELSE.
**            IF S_TIME IS NOT INITIAL." S4DK905969
**              CONTINUE.
**            ENDIF.
**            GS_ALV-TIME = '超过2年未下单'.
**          ENDIF.


**          CLEAR LV_EBELN.
          "CLEAR LV_EBELN.
          APPEND GS_ALV TO GT_ALV.
        ENDIF.
      ENDIF.
    ELSE."MPN物料
      READ TABLE LT_MARA INTO DATA(LS_MARA) WITH KEY MATNR = GS_ALL-EMATN.
      IF SY-SUBRC = 0.
        "生产商编号
        GS_ALV-MFRNR = LS_MARA-MFRNR.
        "生产商名称
        GS_ALV-PRO_NAME = LS_MARA-NAME1 && LS_MARA-NAME2 && LS_MARA-NAME3 && LS_MARA-NAME4.
        "生产厂家地址
        GS_ALV-STRAS2 = LS_MARA-STRAS.
        "生产商等级
        READ TABLE LT_ADRC2 INTO DATA(LS_ADRC2) WITH KEY MATNR = GS_ALL-EMATN.
        IF SY-SUBRC = 0.
          GS_ALV-PRO_REGIOGROUP = LS_ADRC2-REGIOGROUP.
          CLEAR LS_ADRC2.
        ENDIF.
*原产地  jiguican 20201229
        READ TABLE LT_BUT020 INTO LS_BUT020 WITH KEY PARTNER = GS_ALV-MFRNR.
        IF SY-SUBRC = 0.
          GS_ALV-ZORIADD = LS_BUT020-LANDX.
          CLEAR LS_BUT020.
        ELSE.
          GS_ALV-ZORIADD = '/'.
        ENDIF.

        "生产商评估合格日期、生产商计划评估日期
        READ TABLE GT_ALL2 INTO GS_ALL2 WITH KEY "ematn = gs_all-ematn
              PARTNER = GS_ALV-MFRNR.
        IF SY-SUBRC = 0.
          GS_ALV-DATE3 = GS_ALL2-DATE3.
          GS_ALV-DATE4 = GS_ALL2-DATE4.

        ENDIF.
        CLEAR GS_ALL2.

        "最近下单时间
**        SELECT
**        EKKO~EBELN,
**        EKKO~AEDAT
**        INTO TABLE @DATA(LT_EBELN)
**              FROM EKPO
**              INNER JOIN EKKO
**              ON EKKO~EBELN = EKPO~EBELN
**              WHERE EKPO~MATNR = @GS_ALL-MATNR
**              AND EKPO~EMATN = @GS_ALL-EMATN.
**        SORT LT_EBELN BY AEDAT DESCENDING.
**        READ TABLE LT_EBELN INTO DATA(LV_EBELN3) INDEX 1.
**        READ TABLE LT_TIME INTO DATA(LS_TIME3) WITH KEY MATNR = GS_ALL-MATNR
**              EMATN = GS_ALL-EMATN
**              LIFNR = GS_ALL-LIFNR
**              EBELN = LV_EBELN3-EBELN.
**        IF SY-SUBRC = 0.
**          GS_ALV-TIME = LS_TIME3-AEDAT+0(4) && '.' && LS_TIME3-AEDAT+4(2) && '.' && LS_TIME3-AEDAT+6(2).
**        ELSE.
**          IF S_TIME IS NOT INITIAL.
**            CONTINUE.
**          ENDIF.
**          GS_ALV-TIME = '超过2年未下单'.
**        ENDIF.

      ENDIF.

**      CLEAR LV_EBELN3.
**      CLEAR LS_TIME3.
      APPEND GS_ALV TO GT_ALV.
    ENDIF.

    DELETE GT_ALV WHERE MFRNR NOT IN S_MFRNR.
    DELETE GT_ALV WHERE DATE3 NOT IN S_DATE3.
    DELETE GT_ALV WHERE DATE4 NOT IN S_DATE4.
    CLEAR:GS_ALL,GS_ALV.
  ENDLOOP.



  LOOP AT GT_ALV INTO GS_ALV.
    "去掉前导0
    GS_ALV-MATNR = ZCL_BC_PUBLIC=>CONV_BY_DDIC( I_INPUT = GS_ALV-MATNR I_OUT = 'X' ).
    GS_ALV-LIFNR = ZCL_BC_PUBLIC=>CONV_BY_DDIC( I_INPUT = GS_ALV-LIFNR I_OUT = 'X' ).
    GS_ALV-EMATN = ZCL_BC_PUBLIC=>CONV_BY_DDIC( I_INPUT = GS_ALV-EMATN I_OUT = 'X' ).
    GS_ALV-MFRNR = ZCL_BC_PUBLIC=>CONV_BY_DDIC( I_INPUT = GS_ALV-MFRNR I_OUT = 'X' ).

    MODIFY GT_ALV FROM GS_ALV.
    CLEAR GS_ALV.
  ENDLOOP.
*  SORT gt_alv BY matnr werks matkx matkl lifnr.
*  DELETE ADJACENT DUPLICATES FROM gt_alv COMPARING matnr werks matkx matkl lifnr.


ENDFORM.

FORM CATALOG."表头
  W_REPID = SY-REPID.
  CLEAR FIELDCAT.

  DEFINE FIELDCATSET."宏定义
    fieldcat-just = 'C'."字段居中显示
    fieldcat-outputlen = 10."自定义字段的长度
    fieldcat-fieldname = &1."透明表字段名
    fieldcat-seltext_l = &2."ALV列名
    fieldcat-col_pos = &3."列位置
    APPEND fieldcat.
  END-OF-DEFINITION.

  FIELDCATSET   'MATNR'   '物料编码'  SY-TABIX.
  FIELDCATSET   'WERKS'   '工厂'  SY-TABIX.
  FIELDCATSET   'MATKX'   '物料描述（短描述）' SY-TABIX.
  FIELDCATSET   'MATKL'   '物料类别'  SY-TABIX.
  FIELDCATSET   'LIFNR'   '经销商编号' SY-TABIX.
  FIELDCATSET   'LIFNR_NAME'   '经销商名称'  SY-TABIX.
  FIELDCATSET   'STRAS'   '经销商地址' SY-TABIX.
  FIELDCATSET   'REGIOGROUP'   '经销商等级'  SY-TABIX.
  FIELDCATSET   'DATE1'   '经销商评估合格日期' SY-TABIX.
  FIELDCATSET   'DATE2'   '经销商计划评估日期' SY-TABIX.
  FIELDCATSET   'EMATN'   'MPN料号' SY-TABIX.
  FIELDCATSET   'MFRNR'   '生产商编号' SY-TABIX.
  FIELDCATSET   'PRO_NAME'    '生产商名称' SY-TABIX.
  FIELDCATSET   'STRAS2'    '生产厂家地址'  SY-TABIX.
  FIELDCATSET   'PRO_REGIOGROUP'    '生产商等级' SY-TABIX.
  FIELDCATSET   'DATE3'   '生产商评估合格日期' SY-TABIX.
  FIELDCATSET   'DATE4'   '生产商计划评估日期' SY-TABIX.
  FIELDCATSET   'ZALLERGEN'   '过敏原' SY-TABIX.
  FIELDCATSET   'ZTRSGEN'   '转基因' SY-TABIX.
  FIELDCATSET   'ZEXPMAT'   '贵重物料'  SY-TABIX.
  FIELDCATSET   'ZWHP'    '危险化学品' SY-TABIX.
  FIELDCATSET   'ZORIADD'   '原产地' SY-TABIX.
  FIELDCATSET   'ZQMSAMP'   '开箱量计算标识' SY-TABIX.
  FIELDCATSET   'CCTJ'  '存储条件'  SY-TABIX.
  FIELDCATSET   'ZMATDET'   '材质明细'  SY-TABIX.
  FIELDCATSET   'ZSAMPING'    'QA取样量' SY-TABIX.
  FIELDCATSET   'TIME'    '最近下单时间'  SY-TABIX.




*layout-colwidth_optimize = 'X'.
  LAYOUT-ZEBRA = 'X'."斑马线的样式

ENDFORM.
*响应鼠标点击时间的子程序
FORM ALV_USER_COMMAND USING R_UCOMM LIKE SY-UCOMM
      RS_SELFIELD TYPE SLIS_SELFIELD.
  CASE R_UCOMM.
    WHEN '&IC1'."默认的值就是这个，网上查资料据说能修改~
      READ TABLE LBKPF INDEX RS_SELFIELD-TABINDEX.
      SET PARAMETER ID 'BLN' FIELD LBKPF-BELNR.
      CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
  ENDCASE.

ENDFORM.

FORM FRM_SET_PF_STATUS USING PT_EXTAB TYPE SLIS_T_EXTAB.
  SET PF-STATUS 'ZHKALV1'.
ENDFORM.



FORM ALVSHOW.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK        = ' '
*     I_BYPASSING_BUFFER       = ' '
*     I_BUFFER_ACTIVE          = ' '
      I_CALLBACK_PROGRAM       = W_REPID "程序名称
      I_CALLBACK_PF_STATUS_SET = 'FRM_SET_PF_STATUS'
*     i_callback_user_command  = 'ALV_USER_COMMAND' "对ALV操作的时候触发所定义的子程序
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME         =
*     I_BACKGROUND_ID          = ' '
*     i_grid_title             = ''' "标题名
*     I_GRID_SETTINGS          =
      IS_LAYOUT                = LAYOUT "程序所定义的layout名称
      IT_FIELDCAT              = FIELDCAT[] "定义fieldcat数据
*     IT_EXCLUDING             =
*     IT_SPECIAL_GROUPS        =
*     IT_SORT                  =
*     IT_FILTER                =
*     IS_SEL_HIDE              =
*     I_DEFAULT                = 'X'
      I_SAVE                   = 'A' "S4DK906088
*     IS_VARIANT               =
*     IT_EVENTS                =
*     IT_EVENT_EXIT            =
*     IS_PRINT                 =
*     IS_REPREP_ID             =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE        = 0
*     I_HTML_HEIGHT_TOP        = 0
*     I_HTML_HEIGHT_END        = 0
*     IT_ALV_GRAPHICS          =
*     IT_HYPERLINK             =
*     IT_ADD_FIELDCAT          =
*     IT_EXCEPT_QINFO          =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      T_OUTTAB                 = GT_ALV
    EXCEPTIONS "下面都是默认的
      PROGRAM_ERROR            = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.



FORM FRM_AUTHORITY_CHECK.

  AUTHORITY-CHECK OBJECT 'M_ORDR_WRK'
   ID 'ACTVT' DUMMY
  ID 'WERKS' FIELD P_WERKS.
  IF SY-SUBRC <> 0.
* Implement a suitable exception handling here
    MESSAGE '权限检查失败' TYPE 'E'.
    GV_SEL_ERROR = 'X'.
  ELSE.
    MESSAGE '有权限' TYPE 'S'.
    GV_SEL_ERROR = ''.
  ENDIF.

ENDFORM.