FUNCTION Z_QM_GET_ZLYGC.
*"----------------------------------------------------------------------
*"*"本地接口：
*"  IMPORTING
*"     VALUE(I_INPUT) TYPE  ZQMS0066 OPTIONAL
*"     VALUE(I_ZSIGN) TYPE  CHAR1 OPTIONAL
*"  EXPORTING
*"     VALUE(E_OUTPUT) TYPE  ZQMS0066
*"     VALUE(E_TYPE) TYPE  BAPI_MTYPE
*"     VALUE(E_MEG) TYPE  BAPI_MSG
*"----------------------------------------------------------------------

  TYPES: BEGIN OF TY_ZVBAP,
           VBELN TYPE VBAP-VBELN,
           POSNR TYPE VBAP-POSNR,
           MATNR TYPE VBAP-MATNR,
           WERKS TYPE VBAP-WERKS,
         END OF TY_ZVBAP.
  DATA: LS_ZVBAP TYPE TY_ZVBAP,
        LT_ZVBAP TYPE STANDARD TABLE OF TY_ZVBAP.

  TYPES: BEGIN OF TY_ZAFKO,
           AUFNR TYPE AFKO-AUFNR,
           FTRMI TYPE AFKO-FTRMI,
           AUFPL TYPE AFKO-AUFPL,
           MATNR TYPE AFPO-MATNR,
           WERKS TYPE AUFK-WERKS,
           MATKL TYPE MARA-MATKL,
         END OF TY_ZAFKO.
  DATA: LS_ZAFKO TYPE TY_ZAFKO,
        LT_ZAFKO TYPE STANDARD TABLE OF TY_ZAFKO.

  DATA: LS_AFPO TYPE AFPO,
        LS_AFKO TYPE AFKO,
        LS_VBAP TYPE VBAP.

  TYPES: BEGIN OF TY_LIST,
           AUFNR TYPE AFKO-AUFNR,
           AUFPL TYPE AFKO-AUFPL,
           MATNR TYPE AFPO-MATNR,
         END OF TY_LIST.

  DATA: LS_LIST TYPE TY_LIST.

  DATA: LS_MAST TYPE MAST,
        LS_STKO TYPE STKO,
        LS_STPO TYPE STPO,
        LT_STPO TYPE STANDARD TABLE OF STPO.

  DATA: LS_KSSK TYPE KSSK,
        LT_KSSK TYPE STANDARD TABLE OF KSSK.
  DATA: LV_CLASSNUM TYPE KLAH-CLASS.
  DATA: LS_RET TYPE BAPIRET2,
        LT_RET TYPE STANDARD TABLE OF BAPIRET2.
  DATA: LS_ACHAR TYPE BAPI1003_ALLOC_VALUES_CHAR,
        LT_ACHAR TYPE STANDARD TABLE OF BAPI1003_ALLOC_VALUES_CHAR.
  DATA: LS_ANUM TYPE BAPI1003_ALLOC_VALUES_NUM,
        LT_ANUM TYPE STANDARD TABLE OF BAPI1003_ALLOC_VALUES_NUM.
  DATA: LS_ACURR TYPE BAPI1003_ALLOC_VALUES_CURR,
        LT_ACURR TYPE STANDARD TABLE OF BAPI1003_ALLOC_VALUES_CURR.
  DATA: LV_STATUS TYPE BAPI1003_KEY-STATUS.

  DATA: LS_KEY TYPE BAPI1003_KEY.
  DATA: LV_OBJEK TYPE CUOBN,
        LV_OBTAB TYPE TABELLE,
        LV_KLART TYPE KLASSENART,
        LV_CLASS TYPE KLASSE_D.

  DATA: LV_ZWJXQ(70) TYPE C,
        LV_ZPSPE(70) TYPE C,
        LV_TMP(30)   TYPE C.

  DATA: LS_AFVC TYPE AFVC,
        LT_AFVC TYPE STANDARD TABLE OF AFVC.
  DATA: LV_COUNT TYPE I.

  DATA: LS_AFVC1 TYPE AFVC,
        LT_AFVC1 TYPE STANDARD TABLE OF AFVC.
  DATA: LV_COUNT1 TYPE I.

  DATA: LV_MAKTX TYPE MAKT-MAKTX.

  DATA: LV_MSEHL  TYPE T006A-MSEHL,
        LV_MSEHL1 TYPE T006A-MSEHL.
  DATA: LV_DAT1(4) TYPE N,
        LV_DAT2    TYPE P DECIMALS 3.
  DATA: LV_COUNT2 TYPE I.
  DATA: LV_STR1    TYPE STRING,
        LV_STR2    TYPE STRING,
        LV_STR3    TYPE STRING,
        LV_STR4(4) TYPE C.
  DATA: LV_LEN TYPE I.

  DATA: LS_CABN TYPE CABN,
        LT_CABN TYPE STANDARD TABLE OF CABN.
  DATA: LS_AUSP TYPE AUSP,
        LT_AUSP TYPE STANDARD TABLE OF AUSP.

***********************************************************************************************

  IF I_INPUT-AUFNR IS INITIAL.
    CLEAR: E_OUTPUT.
    E_TYPE = 'E'.
    E_MEG = '工单号为空,无法处理.'.
    RETURN.
  ENDIF.

  IF I_ZSIGN = 'A'. "组合装工单拆单后下达工单

    MOVE-CORRESPONDING I_INPUT TO E_OUTPUT.

    SELECT SINGLE B~MSEHL  "工单主产品物料单位
    INTO E_OUTPUT-ULY
    FROM AFPO AS A
    INNER JOIN T006A AS B ON A~MEINS = B~MSEHI AND B~SPRAS = '1'
    WHERE A~AUFNR = I_INPUT-AUFNR AND A~POSNR = '0001'.

    E_OUTPUT-ZMPLYL = '1' && SPACE && E_OUTPUT-ULY.
    E_OUTPUT-ZQTLY = '1' && SPACE && E_OUTPUT-ULY.

*************************************************************************************************

    SELECT SINGLE A~VBELN A~POSNR A~MATNR A~WERKS
    INTO CORRESPONDING FIELDS OF LS_ZVBAP
    FROM VBAP AS A
    INNER JOIN AFPO AS B ON A~VBELN = B~KDAUF AND A~POSNR = B~KDPOS
    WHERE B~AUFNR = I_INPUT-AUFNR AND B~POSNR = '0001'
      AND A~ZSFXBZ IN ( 'A','B','C','2','3','4' ).

    IF LS_ZVBAP IS NOT INITIAL.

***      SELECT A~AUFNR A~FTRMI B~MATNR D~WERKS
***      INTO CORRESPONDING FIELDS OF TABLE LT_ZAFKO
***      FROM AFKO AS A
***      INNER JOIN AUFK AS D ON D~AUFNR = A~AUFNR
***      INNER JOIN AFPO AS B ON B~AUFNR = A~AUFNR AND B~POSNR = '0001' AND B~XLOEK = ''
***      INNER JOIN VBAP AS C ON C~VBELN = B~KDAUF AND C~POSNR = B~KDPOS
***      WHERE C~VBELN = LS_ZVBAP-VBELN AND C~POSNR = LS_ZVBAP-POSNR.

      SELECT A~AUFNR A~FTRMI A~AUFPL B~MATNR D~WERKS
      INTO CORRESPONDING FIELDS OF TABLE LT_ZAFKO
      FROM AFKO AS A
      INNER JOIN AUFK AS D ON D~AUFNR = A~AUFNR
      INNER JOIN AFPO AS B ON B~AUFNR = A~AUFNR AND B~POSNR = '0001' AND B~XLOEK = ''
      WHERE B~KDAUF = LS_ZVBAP-VBELN AND B~KDPOS = LS_ZVBAP-POSNR.

      IF LT_ZAFKO IS NOT INITIAL.

        SORT LT_ZAFKO BY FTRMI.

        READ TABLE LT_ZAFKO INTO LS_ZAFKO INDEX 1. " 排序后，取新包装第1批进行留样计算
      ENDIF.
    ENDIF.

    IF LS_ZAFKO-AUFNR = I_INPUT-AUFNR.

      SELECT SINGLE MATKL
      INTO LS_ZAFKO-MATKL
      FROM MARA
      WHERE MATNR = LS_ZAFKO-MATNR.

      SELECT SINGLE ZLYGC
      INTO E_OUTPUT-ZLYGC
      FROM ZQMTLYGC
      WHERE MATKL = LS_ZAFKO-MATKL AND WERKS = LS_ZAFKO-WERKS.
    ENDIF.

    E_TYPE = 'S'.
    E_MEG = '数据已处理.'.
    RETURN.

  ELSEIF I_ZSIGN = 'B'. "非组合装成品LIMS接口数据回传后

    MOVE-CORRESPONDING I_INPUT TO E_OUTPUT.
    CLEAR: E_OUTPUT-ZQTLY.

    SELECT SINGLE A~VBELN A~POSNR A~MATNR A~WERKS
    INTO CORRESPONDING FIELDS OF LS_ZVBAP
    FROM VBAP AS A
    INNER JOIN AFPO AS B ON A~VBELN = B~KDAUF AND A~POSNR = B~KDPOS
    WHERE B~AUFNR = I_INPUT-AUFNR AND B~POSNR = '0001'
      AND A~ZSFXBZ IN ( 'A','B','C','2','3','4' ).

    IF LS_ZVBAP IS NOT INITIAL.

      SELECT A~AUFNR A~FTRMI A~AUFPL B~MATNR D~WERKS
      INTO CORRESPONDING FIELDS OF TABLE LT_ZAFKO
      FROM AFKO AS A
      INNER JOIN AUFK AS D ON D~AUFNR = A~AUFNR
      INNER JOIN AFPO AS B ON B~AUFNR = A~AUFNR AND B~POSNR = '0001' AND B~XLOEK = ''
      WHERE B~KDAUF = LS_ZVBAP-VBELN AND B~KDPOS = LS_ZVBAP-POSNR.

      IF LT_ZAFKO IS NOT INITIAL.

        SORT LT_ZAFKO BY FTRMI.

        READ TABLE LT_ZAFKO INTO LS_ZAFKO INDEX 1.  " 排序后，取新包装第1批进行留样计算
      ENDIF.
    ENDIF.

    IF LS_ZAFKO-AUFNR = I_INPUT-AUFNR.

      SELECT SINGLE MATKL
      INTO LS_ZAFKO-MATKL
      FROM MARA
      WHERE MATNR = LS_ZAFKO-MATNR.

      SELECT SINGLE ZLYGC
      INTO E_OUTPUT-ZLYGC
      FROM ZQMTLYGC
      WHERE MATKL = LS_ZAFKO-MATKL AND WERKS = LS_ZAFKO-WERKS.
    ENDIF.

******************************************************************************************

    SELECT SINGLE *
    INTO CORRESPONDING FIELDS OF LS_AFPO
    FROM AFPO
    WHERE AUFNR = I_INPUT-AUFNR AND POSNR = '0001'.

    SELECT SINGLE *
    INTO CORRESPONDING FIELDS OF LS_AFKO
    FROM AFKO
    WHERE AUFNR = I_INPUT-AUFNR.

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE LT_KSSK
    FROM KSSK
    WHERE MAFID = 'O' AND KLART = '001' AND DATUB >= SY-DATUM
      AND OBJEK = LS_AFPO-MATNR.

    SORT LT_KSSK BY ZAEHL.

    LOOP AT LT_KSSK INTO LS_KSSK.

      SELECT SINGLE CLASS
      INTO LV_CLASSNUM
      FROM KLAH
      WHERE CLINT = LS_KSSK-CLINT.

      IF LV_CLASSNUM IS NOT INITIAL.

        LS_KEY-CLASSNUM = LV_CLASSNUM.
        LS_KEY-OBJECT = LS_AFPO-MATNR.
        LS_KEY-OBJECTTABLE = 'MARA'.
        LS_KEY-CLASSTYPE = '001'.
        LS_KEY-OBJECT_LONG = LS_AFPO-MATNR.

        CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'  "获得物料相关分类特性值
          EXPORTING
            OBJECTKEY       = LS_KEY-OBJECT
            OBJECTTABLE     = LS_KEY-OBJECTTABLE
            CLASSNUM        = LS_KEY-CLASSNUM
            CLASSTYPE       = LS_KEY-CLASSTYPE
            OBJECTKEY_LONG  = LS_KEY-OBJECT_LONG
          IMPORTING
            STATUS          = LV_STATUS
*           STANDARDCLASS   =
          TABLES
            ALLOCVALUESNUM  = LT_ANUM
            ALLOCVALUESCHAR = LT_ACHAR
            ALLOCVALUESCURR = LT_ACURR
            RETURN          = LT_RET.

        LOOP AT LT_ACHAR INTO LS_ACHAR.

          CASE LS_ACHAR-CHARACT.
***            WHEN 'ZWJXQ'.
***              LV_ZWJXQ = LS_ACHAR-VALUE_CHAR.
            WHEN 'ZPSPE'.
              LV_ZPSPE = LS_ACHAR-VALUE_CHAR.
            WHEN OTHERS.
          ENDCASE.

          CLEAR: LS_ACHAR.
        ENDLOOP.

      ENDIF.

      CLEAR: LS_KSSK,LV_CLASSNUM,LV_STATUS,LT_ANUM,LT_ACHAR,LT_ACURR,LT_RET,LS_KEY.
    ENDLOOP.

    SELECT SINGLE *
    INTO CORRESPONDING FIELDS OF LS_CABN
    FROM CABN
    WHERE ATNAM = 'ZWJXQ'.

    IF LS_CABN-ATINN IS NOT INITIAL.

      SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF LS_AUSP
      FROM AUSP
      WHERE OBJEK = LS_AFPO-MATNR AND KLART = '001' AND ATINN = LS_CABN-ATINN.

      IF LS_AUSP-ATWRT IS NOT INITIAL.
        LV_ZWJXQ = LS_AUSP-ATWRT.
      ENDIF.
    ENDIF.

    IF LV_ZWJXQ <> '08'. " 不等于 大包装（08）

      IF E_OUTPUT-ZJYQYL IS NOT INITIAL.

        CLEAR: LV_TMP.

        LV_TMP = E_OUTPUT-ZJYQYL.

        REPLACE ALL OCCURRENCES OF REGEX '[0-9]' IN LV_TMP WITH SPACE. "去除数字

        CONDENSE LV_TMP NO-GAPS .

        E_OUTPUT-UJY = LV_TMP.
      ENDIF.

      IF E_OUTPUT-ZMPLYL IS NOT INITIAL.

        CLEAR: LV_TMP.

        LV_TMP = E_OUTPUT-ZMPLYL.

        REPLACE ALL OCCURRENCES OF REGEX '[0-9]' IN LV_TMP WITH SPACE. "去除数字

        CONDENSE LV_TMP NO-GAPS .

        E_OUTPUT-ULY = LV_TMP.
      ENDIF.

      IF E_OUTPUT-ULY = '瓶'.

        SELECT *
        INTO CORRESPONDING FIELDS OF TABLE LT_AFVC
        FROM AFVC
        WHERE AUFPL = LS_AFKO-AUFPL AND PLNTY = '2'.

        DELETE LT_AFVC WHERE PHSEQ IS INITIAL.

        LV_COUNT = LINES( LT_AFVC ). " 工单工序数量

        IF LV_COUNT > 1.
          E_OUTPUT-ZQTLY = E_OUTPUT-ZQTLY && '+1 瓶'.
        ENDIF.
      ENDIF.

      IF E_OUTPUT-ULY = E_OUTPUT-UJY.
        E_OUTPUT-ZQTLY = E_OUTPUT-ZQTLY && '+1 ' && E_OUTPUT-ULY.
      ELSE.
        E_OUTPUT-ZQTLY = E_OUTPUT-ZQTLY && '+1 ' && E_OUTPUT-UJY.
        E_OUTPUT-ZQTLY = E_OUTPUT-ZQTLY && '+1 ' && E_OUTPUT-ULY.
      ENDIF.

      SELECT SINGLE MAKTX
      INTO LV_MAKTX
      FROM MAKT
      WHERE SPRAS = '1' AND MATNR = LS_AFPO-MATNR.

      IF LV_MAKTX CS '半成品'. " 包含半成品

        SELECT SINGLE *
        INTO CORRESPONDING FIELDS OF LS_VBAP
        FROM VBAP
        WHERE VBELN = LS_AFPO-KDAUF AND POSNR = LS_AFPO-KDPOS.

        SELECT SINGLE A~AUFNR A~AUFPL B~MATNR
        INTO CORRESPONDING FIELDS OF LS_LIST
        FROM AFKO AS A
        INNER JOIN AFPO AS B ON B~AUFNR = A~AUFNR AND B~POSNR = '0001'
        WHERE B~KDAUF = LS_VBAP-VBELN AND B~KDPOS = LS_VBAP-POSNR
          AND B~MATNR = LS_VBAP-MATNR.

        SELECT *
        INTO CORRESPONDING FIELDS OF TABLE LT_AFVC1
        FROM AFVC
        WHERE AUFPL = LS_LIST-AUFPL AND PLNTY = '2'.

        DELETE LT_AFVC1 WHERE PHSEQ IS INITIAL.

        LV_COUNT1 = LINES( LT_AFVC1 ). " 工单工序数量

        SELECT SINGLE *
        INTO CORRESPONDING FIELDS OF LS_MAST
        FROM MAST
        WHERE MATNR = LS_VBAP-MATNR AND WERKS = LS_VBAP-WERKS AND STLAN = '1'.

        SELECT SINGLE *
        INTO CORRESPONDING FIELDS OF LS_STKO
        FROM STKO
        WHERE STLNR = LS_MAST-STLNR.

        SELECT *
        INTO CORRESPONDING FIELDS OF TABLE LT_STPO
        FROM STPO
        WHERE STLNR = LS_MAST-STLNR AND IDNRK = LS_AFPO-MATNR.

        SORT LT_STPO BY DATUV DESCENDING.

        READ TABLE LT_STPO INTO LS_STPO INDEX 1.

        SELECT SINGLE MSEHL   " BOM 组件的单位
        INTO LV_MSEHL
        FROM T006A
        WHERE SPRAS = '1' AND MSEHI = LS_STPO-MEINS.

        SELECT SINGLE MSEHL  " BOM 主产品的单位
        INTO LV_MSEHL1
        FROM T006A
        WHERE SPRAS = '1' AND MSEHI = LS_STKO-BMEIN.

        IF LV_MSEHL <> LV_MSEHL1 AND LV_ZPSPE IS NOT INITIAL.

          LV_STR1 = LV_MSEHL && '/' && E_OUTPUT-ULY.

          IF LV_ZPSPE CS LV_STR1. "特性值中包含对应单位数量

            SPLIT LV_ZPSPE AT LV_STR1 INTO LV_STR2 LV_STR3.

            IF STRLEN( LV_STR2 ) > 4.
              LV_LEN = STRLEN( LV_STR2 ) - 4.
              LV_STR4 = LV_STR2+LV_LEN(4).
            ELSE.
              LV_STR4 = LV_STR2.
            ENDIF.

            CALL FUNCTION 'PREPARE_STRING'  " 只保留数字
              EXPORTING
                I_VALID_CHARS  = ' 0123456789'
                I_XVALID_CHECK = 'X'
                I_XCHAR_REPL   = 'X'
                I_XTOUPPER     = 'X'
              CHANGING
                C_STRING       = LV_STR4.

            CONDENSE LV_STR4 NO-GAPS .

            LV_DAT1 = LV_STR4. "单位包装数量

            LV_DAT2 = LS_STPO-MENGE / ( LS_STKO-BMENG * LV_DAT1 ). "计算组件比例

            CALL FUNCTION 'ROUND'
              EXPORTING
                DECIMALS      = 0       " 保留多少位小数
                INPUT         = LV_DAT2
                SIGN          = '-'     " + 向上取舍 - 向下取舍 （负数也一样）
              IMPORTING
                OUTPUT        = LV_COUNT2 " 输出返回结果
              EXCEPTIONS
                INPUT_INVALID = 1
                OVERFLOW      = 2
                TYPE_INVALID  = 3
                OTHERS        = 4.

            LV_COUNT2 = LV_COUNT2 * LV_COUNT1 * 2.

            E_OUTPUT-ZQTLY = E_OUTPUT-ZQTLY && '+' && LV_COUNT2 && E_OUTPUT-ULY.

          ENDIF.
        ELSE.

          LV_DAT1 = '1'.

          LV_DAT2 = LS_STPO-MENGE / ( LS_STKO-BMENG * LV_DAT1 ). "计算组件比例

          CALL FUNCTION 'ROUND'
            EXPORTING
              DECIMALS      = 0       " 保留多少位小数
              INPUT         = LV_DAT2
              SIGN          = '-'     " + 向上取舍 - 向下取舍 （负数也一样）
            IMPORTING
              OUTPUT        = LV_COUNT2 " 输出返回结果
            EXCEPTIONS
              INPUT_INVALID = 1
              OVERFLOW      = 2
              TYPE_INVALID  = 3
              OTHERS        = 4.

          LV_COUNT2 = LV_COUNT2 * LV_COUNT1 * 2.

          E_OUTPUT-ZQTLY = E_OUTPUT-ZQTLY && '+' && LV_COUNT2 && E_OUTPUT-ULY.
        ENDIF.
      ENDIF.

    ENDIF.

    E_TYPE = 'S'.
    E_MEG = '数据已处理.'.
    RETURN.
  ELSEIF I_ZSIGN = 'C'. "非组合装成品工单下达触发检验批

    E_OUTPUT-AUFNR = I_INPUT-AUFNR.

    E_TYPE = 'S'.
    E_MEG = '数据已处理.'.
    RETURN.
  ELSE.

    CLEAR: E_OUTPUT.

    E_TYPE = 'E'.
    E_MEG = '数据未处理.'.
    RETURN.
  ENDIF.

ENDFUNCTION.